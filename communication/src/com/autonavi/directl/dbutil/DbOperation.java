package com.autonavi.directl.dbutil;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.sql.Timestamp;
import java.text.SimpleDateFormat;
import java.math.BigDecimal;
import java.rmi.RemoteException;
import java.util.ArrayList;
import java.util.Date;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import java.io.*;
import com.autonavi.directl.Log;
import com.autonavi.directl.bean.TArea;
import com.autonavi.directl.bean.TEnt;
import com.autonavi.directl.bean.TSpeedCase;
import com.autonavi.directl.bean.TTerminal;
import com.autonavi.directl.parse.ParseBase;
import com.autonavi.directl.parse.PictureCacher;
import com.sos.sosgps.api.DPoint;
import com.sos.sosgps.api.CoordAPI;

 

/**
 * @author a
 * 
 */
public class DbOperation {

	/**
	 * 建立数据库连接,先从连接池中获取，如果为NULL，则直接连接数据库
	 * 
	 * @return boolean
	 */
	public  static Connection getConnection() {
		Connection conn = null;
		conn = DbUtil.getConnection();

		return conn;
	}
	
	public  static Connection getNodeConnection() {
		Connection conn = null;
		conn = DbUtil.getNodeConnection();

		return conn;
	}

	/**
	 * 释放资源
	 */
	public  static void release(Statement stmt, ResultSet rs,
			PreparedStatement pstmt, Connection con) {
		try {
			if (rs != null) {
				rs.close();
			}
			if (stmt != null) {
				stmt.close();
			}
			if (pstmt != null) {
				pstmt.close();
			}
			if (con != null && !con.isClosed()) {
				con.close();
			}
		} catch (SQLException e) {
			Log.getInstance().errorLog(e.getMessage(), e);
		}
	}
	/**
	 * 插入报警信息
	 * @param base ,基本信息
	 * @param type 报警类型 1超速 2区域 3主动 6偏航
	 * @param caseid 案例ID
	 * @return
	 */
	public synchronized boolean insertAlarm(ParseBase base, String type,long caseid) {
		boolean flag = false;
		Connection conn = DbUtil.getConnection();
		PreparedStatement pst = null;
		Statement stm = null;
		
		String sql = "insert into t_area_locrecord (id,device_id,longitude,latitude,speed,direction,height,distance,alarm_time,alarm_type,case_id,jmx,jmy) ";
		sql += "values(SEQ_AREALARM_LOCRECORD.NEXTVAL,?,?,?,?,?,?,?,?,?,?,?,?)";
		 
		double[] xx = new double[1];// 原始经度
		double[] yy = new double[1];// 原始纬度
		xx[0] = Float.parseFloat(base.getCoordX());
		yy[0] = Float.parseFloat(base.getCoordY());
		CoordAPI coordAPI = new CoordAPI();
		DPoint dpoint = new DPoint();
		
		String mx = "";
		String my = "";
		DPoint[] pts = null;
		try {
			// 加密偏转原始坐标
			pts = coordAPI.encryptConvert(xx, yy);
			mx = pts[0].getEncryptX();
			my = pts[0].getEncryptY();
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
		try {
			conn.setAutoCommit(false);
			pst = conn.prepareStatement(sql);
			
			pst.setString(1, base.getDeviceSN());
			pst.setFloat(2, Float.parseFloat(base.getCoordX()==null ? "0" :base.getCoordX()));
			pst.setFloat(3, Float.parseFloat(base.getCoordY()==null ? "0" :base.getCoordY()));
			pst.setFloat(4, Float.parseFloat(base.getSpeed()==null ? "0" :base.getSpeed()));
			pst.setFloat(5, Float.parseFloat(base.getDirection()==null ? "0" :base.getDirection()));
			pst.setFloat(6, Float.parseFloat(base.getAltitude()==null ? "0" : base.getAltitude()));
			pst.setFloat(7, Float.parseFloat(base.getLC()==null ? "0" :base.getLC()));
			pst.setTimestamp(8, base.getTimeStamp());
			pst.setString(9, type);
			pst.setLong(10, caseid);
			pst.setString(11, mx);
			pst.setString(12, my);
 			
			pst.execute();
			conn.commit();
			conn.setAutoCommit(true);
			flag = true;
		} catch (Exception ex) {
			flag = false;
			ex.printStackTrace();
			Log.getInstance().outLog("插入报警信息异常：" + ex.getMessage());
		} finally {
			 
			DbOperation.release(null, null, pst, conn);
		}
		return flag;
	}
	/**
	 * 获取速度案例ID
	 * @param devid
	 * @return
	 */
	public synchronized TSpeedCase findSpeedCaseId(String devid) {
		int id = 0;
		Connection conn =  DbUtil.getConnection();
		PreparedStatement pst = null;
		ResultSet rs = null;
		TSpeedCase tcase = null;
		
		String sql = "select * from t_speed_case where device_id=? and flag=1 order by crtdate desc";
		//String sql = "select * from t_speed_case where device_id=?  order by crtdate desc";

		 
		try {
			 
			pst = conn.prepareStatement(sql);
			pst.setString(1, devid);
 			
			rs = pst.executeQuery();
			if (rs.next()){
				tcase = new TSpeedCase();
				tcase.setId(rs.getLong("id"));
				tcase.setMaxSpeed(rs.getFloat("max_speed"));
			}
			 
			 
		} catch (Exception ex) {
			 
			Log.getInstance().errorLog("查询速度案例信息异常：" + ex.getMessage(), ex);
		} finally {
			 
			DbOperation.release(null, rs, pst, conn);
		}
		
		return tcase;
		 
	}
	
	/**
	 * 获取区域案例
	 * @param devid
	 * @return
	 */
	public synchronized TArea findAreaCaseId(String devid) {
		 
		Connection conn = DbUtil.getConnection();
		TArea areaCase = null;
		
		PreparedStatement pst = null;
		ResultSet rs = null;
		
		String sql = "select * from t_area where device_id=? and flag=1 order by CREATEDATE desc";
		//String sql = "select * from t_area where device_id=?  order by CREATEDATE desc";
		 

		 
		try {
			conn.setAutoCommit(false);
			pst = conn.prepareStatement(sql);
			pst.setString(1, devid);
 			
			rs = pst.executeQuery();
			if (rs.next()){
				areaCase = new TArea();
				areaCase.setId(rs.getLong("ID"));
				areaCase.setDeviceId(rs.getString("device_id"));
				areaCase.setBeginDate(rs.getString("begin_date"));
				areaCase.setEndDate(rs.getString("end_date"));
				areaCase.setType(rs.getString("type"));
				areaCase.setXy(rs.getString("xy"));
				areaCase.setEndDate(rs.getString("ep_code"));				
			}
			conn.commit();
			conn.setAutoCommit(true);
		} catch (Exception ex) {
			 
			Log.getInstance().errorLog("查询区域案例信息异常：" + ex.getMessage(), ex);
			
		} finally {
			 
			DbOperation.release(null, rs, pst, conn);
		}
		
		return areaCase;
		 
	}
	
	 
	
	/**
	 * 获取偏航案例ID
	 * @param devid
	 * @return
	 */
	public  synchronized int findLineCaseId(String devid) {
		int id = 0;
		Connection conn = DbUtil.getConnection();
		PreparedStatement pst = null;
		ResultSet rs = null;
		
		String sql = "select * from t_line_alarm where deviceid=? order by CREATEDATE desc";
		 
		 
		try {
			conn.setAutoCommit(false);
			pst = conn.prepareStatement(sql);
			pst.setString(1, devid);
 			
			rs = pst.executeQuery();
			if (rs.next()){
				id = rs.getInt("id");
			}
			conn.commit();
			conn.setAutoCommit(true);
		} catch (Exception ex) {
			 
			Log.getInstance().errorLog("查询区域案例信息异常：" + ex.getMessage(), ex);
		} finally {
			 
			DbOperation.release(null, rs, pst, conn);
		}
		
		return id;
		 
	}
	/**
	 * 保存终端上行图片的基本信息
	 * @param base
	 * @param type
	 * @param content
	 */
	public synchronized  void insertPicMsg(ParseBase base){
		Connection conn = DbUtil.getConnection();
		PreparedStatement pst = null;
		Statement stm = null;
		
		String sql = "insert into t_muti_medium (id,device_id,longitude,lantitude,upload_time) ";
		sql += "values(SEQ_MULTI_MEDIUM.NEXTVAL,?,?,?,sysdate)";
		 
		try {
			conn.setAutoCommit(false);
			pst = conn.prepareStatement(sql);
			pst.setString(1, base.getDeviceSN());
			pst.setString(2, base.getDeviceSN());
			pst.setFloat(3, Float.parseFloat(base.getCoordX()));
			pst.setFloat(4, Float.parseFloat(base.getCoordY()));
			
 			pst.execute();
			conn.commit();
			conn.setAutoCommit(true);
		} catch (Exception ex) {
			 
			Log.getInstance().errorLog("插入上传图片基本信息异常：" + ex.getMessage(), ex);
		} finally {
			 
			DbOperation.release(null, null, pst, conn);
		}
	}
	

	
	/**
	 * 保存终端上行信息
	 * @param base
	 * @param type
	 * @param content
	 */
	public synchronized  void insertMessage(ParseBase base, String type, String content){
		Connection conn = DbUtil.getConnection();
		PreparedStatement pst = null;
		Statement stm = null;
		
		String sql = "insert into t_message (id,sender,receiver,content,msg_type,createdate) ";
		sql += "values(SEQ_MESSAGE.NEXTVAL,?,?,?,?,sysdate)";
		 
		try {
			conn.setAutoCommit(false);
			pst = conn.prepareStatement(sql);
			pst.setString(1, base.getDeviceSN());
			pst.setString(2, "位置通平台");
			pst.setString(3, content);
			pst.setString(4, type);
 			pst.execute();
			conn.commit();
			conn.setAutoCommit(true);
		} catch (Exception ex) {
			 
			Log.getInstance().errorLog("插入报警信息异常：" + ex.getMessage(), ex);
		} finally {
			 
			DbOperation.release(null, null, pst, conn);
		}
	}
	
	/**
	 * 更新指令状态
	 * 
	 * @param flag
	 * @return
	 */
	public synchronized void updateInstructionsState(String deviceId, String state, long seq) {
		ArrayList list = new ArrayList();
		PreparedStatement pst = null;
		ResultSet rs = null;
		Connection conn = this.getConnection();
		String sql = "update t_structions set state=? where device_id=? and id=?";

		try {
			
			conn.setAutoCommit(false);
			pst = conn.prepareStatement(sql);
			pst.setString(1, state);
			pst.setString(2, deviceId);
			pst.setLong(3, seq);
			pst.executeQuery();
			conn.commit();
			conn.setAutoCommit(true);
		} catch (SQLException e) {
			Log.getInstance().outLog("更新指令状态失败"+e.getMessage());
			e.printStackTrace();
		} finally {
			DbOperation.release(null, rs, pst, conn);
		}

	}
	
	
	

	 

	public static void main(String[] args) {
		DbOperation op = new DbOperation();
		byte[] img = com.autonavi.directl.Tools
				.fromHexString("");
		File file = new File("e:\\Images\\081608113918.jpg");
		java.io.InputStream is = null;

		ByteArrayInputStream bais = null;
		try {
			is = new java.io.FileInputStream(file);
			//op.insertPicStreamInfo(is);
		} catch (Exception ex) {

			ex.printStackTrace();
		}
	}

    public synchronized static TTerminal findTerminalByDeviceId(String deviceId) {
        Connection conn = DbUtil.getConnection();
        TTerminal terminal = null;
        PreparedStatement pst = null;
        ResultSet rs = null;
        String sql = "select * from t_terminal where device_id=? ";
        try {
            conn.setAutoCommit(false);
            pst = conn.prepareStatement(sql);
            pst.setString(1, deviceId);
            
            rs = pst.executeQuery();
            if (rs.next()){
                terminal = new TTerminal();
                terminal.setTermName(rs.getString("TERM_NAME"));
                terminal.setImgUrl(rs.getString("IMG_URL"));
                terminal.setSuiteId(rs.getLong("SUITE_ID"));
                terminal.setEntCode(rs.getString("ENT_CODE"));
                terminal.setDeviceId(rs.getString("DEVICE_ID"));
                terminal.setTypeCode(rs.getString("TYPE_CODE"));
                terminal.setSimcard(rs.getString("SIMCARD"));
                terminal.setOemCode(rs.getString("OEM_CODE"));
                terminal.setDriverNumber(rs.getString("DRIVER_NUMBER"));
                terminal.setLocateType(rs.getString("LOCATE_TYPE"));
                terminal.setCarTypeId(rs.getLong("CAR_TYPE_ID"));
                terminal.setIsAllocate(rs.getString("IS_ALLOCATE"));
                terminal.setCrtdate(rs.getDate("CRTDATE"));
                terminal.setSubCompany(rs.getString("SUB_COMPANY"));
                terminal.setOutdate(rs.getDate("OUTDATE"));
                terminal.setUsageFlag(rs.getLong("USAGE_FLAG"));
                terminal.setProtocolPwd(rs.getString("PROTOCOL_PWD"));
                terminal.setAreaAlarmFlag(rs.getString("AREA_ALARM_FLAG"));
                terminal.setSpeedAlarmFlag(rs.getString("SPEED_ALARM_FLAG"));
                terminal.setStartTime(rs.getString("START_TIME"));
                terminal.setEndTime(rs.getString("END_TIME"));
                terminal.setGetherInterval(rs.getLong("GETHER_INTERVAL"));
                terminal.setVehicleNumber(rs.getString("VEHICLE_NUMBER"));
                terminal.setVehicleType(rs.getString("VEHICLE_TYPE"));
                terminal.setOilSpeedLimit(rs.getLong("OIL_SPEED_LIMIT"));
                terminal.setSpeedAlarmLimit(rs.getLong("SPEED_ALARM_LIMIT"));
                terminal.setSpeedAlarmLast(rs.getLong("SPEED_ALARM_LAST"));
                terminal.setHoldAlarmFlag(rs.getString("HOLD_ALARM_FLAG"));
                terminal.setProvince(rs.getString("PROVINCE"));
                terminal.setCity(rs.getString("CITY"));
                terminal.setTermdesc(rs.getString("TERM_DESC"));
                terminal.setWeek(rs.getLong("WEEK"));
                terminal.setCarTypeInfoId(rs.getLong("CAR_TYPE_INFO_ID"));
                terminal.setExpirationTime(rs.getDate("EXPIRATION_TIME"));
                terminal.setExpirationFlag(rs.getLong("EXPIRATION_FLAG"));
                terminal.setImsi(rs.getString("IMSI"));
                terminal.setCreateon(rs.getLong("CREATEON"));
                terminal.setLastupdateon(rs.getLong("LASTUPDATEON"));
                terminal.setStates(rs.getLong("STATES"));
                terminal.setTermType(rs.getString("TERM_TYPE"));
                
                
            }
            conn.commit();
            conn.setAutoCommit(true);
        } catch (Exception ex) {
            Log.getInstance().errorLog(ex.getMessage(), ex);
        } finally {
            DbOperation.release(null, rs, pst, conn);
        }
        return terminal;
    }

    public synchronized static TEnt findEntByentCode(String entCode) {
        Connection conn = DbUtil.getConnection();
        TEnt tEnt = null;
        PreparedStatement pst = null;
        ResultSet rs = null;
        String sql = "select * from t_ent where ent_code=? ";
        try {
            conn.setAutoCommit(false);
            pst = conn.prepareStatement(sql);
            pst.setString(1, entCode);
            rs = pst.executeQuery();
            if (rs.next()){
                tEnt = new TEnt();
                tEnt.setId(rs.getLong("id"));
                tEnt.setEntCode(rs.getString("ENT_CODE"));
                tEnt.setEntName(rs.getString("ENT_NAME"));
                tEnt.setOpenTime(rs.getDate("OPEN_TIME"));
                tEnt.setEndTime(rs.getDate("END_TIME"));
                tEnt.setEntStatus(rs.getString("ENT_STATUS"));
                tEnt.setCenterX(rs.getString("CENTER_X"));
                tEnt.setCenterY(rs.getString("CENTER_Y"));
                tEnt.setMapZoom(rs.getLong("MAP_ZOOM"));
                tEnt.setLogoUrl(rs.getString("LOGO_URL"));
                tEnt.setEntCrtDate(rs.getDate("ENT_CRT_DATE"));
                tEnt.setFeeType(rs.getLong("FEE_TYPE"));
                tEnt.setBusinessId(rs.getString("BUSINESS_ID"));
                tEnt.setAreaCode(rs.getString("AREA_CODE"));
                tEnt.setEntType(rs.getLong("ENT_TYPE"));
                tEnt.setOtherInfo(rs.getString("OTHER_INFO"));
                tEnt.setMaxUserNum(rs.getLong("MAX_USER_NUM"));
                tEnt.setSmsAccount(rs.getString("SMS_ACCOUNT"));
                tEnt.setSmsPwd(rs.getString("SMS_PWD"));
                tEnt.setVisitDistance(rs.getLong("VISIT_DISTANCE"));
                tEnt.setDoubleVisitTime(rs.getLong("DOUBLE_VISIT_TIME"));
                tEnt.setVisitPlaceDistance(rs.getLong("VISIT_PLACE_DISTANCE"));
                tEnt.setVisitTjOrder(rs.getLong("VISIT_TJ_ORDER"));
                tEnt.setSmsTotal(rs.getLong("SMSTOTAL"));
                tEnt.setSmsAvailable(rs.getLong("SMS_AVAILABLE"));
                tEnt.setSmsType(rs.getLong("SMS_TYPE"));
                tEnt.setVisitTjStatus(rs.getLong("VISIT_TJ_STATUS"));
                tEnt.setReportStatus(rs.getLong("REPORT_STATUS"));
                tEnt.setSmsCount(rs.getLong("SMS_COUNT"));
                tEnt.setHashCode(rs.getLong("HASH_CODE"));
                tEnt.setCarGreyInterval(rs.getLong("CAR_GREY_INTERVAL"));
                tEnt.setPersionGreyInterval(rs.getLong("PERSION_GREY_INTERVAL"));
                tEnt.setStatus(rs.getLong("STATUS"));
                tEnt.setCreateby(rs.getString("CREATEBY"));
                tEnt.setLastupdateby(rs.getString("LASTUPDATEBY"));
                tEnt.setCreateon(rs.getLong("CREATEON"));
                tEnt.setLastupdateon(rs.getLong("LASTUPDATEON"));
                tEnt.setEditionCode(rs.getString("EDITION_CODE"));
                tEnt.setVersion(rs.getString("VERSION"));
                tEnt.setMmsAccount(rs.getString("MMS_ACCOUNT"));
                tEnt.setMmsPwd(rs.getString("MMS_PWD"));
            }
            conn.commit();
            conn.setAutoCommit(true);
        } catch (Exception ex) {
            Log.getInstance().errorLog(ex.getMessage(), ex);
        } finally {
            DbOperation.release(null, rs, pst, conn);
        }
        return tEnt;
    }
    
}
